/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Pockey API Documentation
 * API documentation for the Pockey application
 * OpenAPI spec version: 1.0
 */
import { faker } from "@faker-js/faker";

import { delay, HttpResponse, http } from "msw";

import type { UserControllerGetUser200 } from "./index.schemas";

export const getUserControllerGetUserResponseMock = (
  overrideResponse: Partial<UserControllerGetUser200> = {},
): UserControllerGetUser200 => ({
  id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  ...overrideResponse,
});

export const getAuthControllerLoginMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/api/v1/auth/login", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getAuthControllerRefreshTokenMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/api/v1/auth/token/refresh", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getAuthControllerUpdatePasswordMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.patch("*/api/v1/auth/password", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getUserControllerGetUserMockHandler = (
  overrideResponse?:
    | UserControllerGetUser200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserControllerGetUser200> | UserControllerGetUser200),
) => {
  return http.get("*/api/v1/user/:id", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUserControllerGetUserResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUserControllerGetUsersMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/api/v1/user", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getUserControllerUpdateUserPasswordMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.patch("*/api/v1/user/:userId/password", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};
export const getPockeyAPIDocumentationMock = () => [
  getAuthControllerLoginMockHandler(),
  getAuthControllerRefreshTokenMockHandler(),
  getAuthControllerUpdatePasswordMockHandler(),
  getUserControllerGetUserMockHandler(),
  getUserControllerGetUsersMockHandler(),
  getUserControllerUpdateUserPasswordMockHandler(),
];
