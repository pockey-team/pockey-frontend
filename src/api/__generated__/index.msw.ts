/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Pockey API Documentation
 * API documentation for the Pockey application
 * OpenAPI spec version: 1.0
 */
import { faker } from "@faker-js/faker";

import { delay, HttpResponse, http } from "msw";

import type {
  RecommendSessionControllerStartSession201,
  RecommendSessionControllerSubmitAnswer201,
} from "./index.schemas";

export const getRecommendSessionControllerStartSessionResponseMock = (
  overrideResponse: Partial<RecommendSessionControllerStartSession201> = {},
): RecommendSessionControllerStartSession201 => ({
  id: faker.string.alpha(20),
  sessionId: faker.string.alpha(20),
  step: faker.helpers.arrayElement([1] as const),
  question: faker.string.alpha(20),
  options: Array.from(
    { length: faker.number.int({ min: 4, max: 4 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha(20)),
  setupCount: faker.number.int({ min: undefined, max: undefined }),
  occasionCount: faker.number.int({ min: undefined, max: undefined }),
  questionCount: faker.number.int({ min: undefined, max: undefined }),
  type: faker.helpers.arrayElement(["setup"] as const),
  ...overrideResponse,
});

export const getRecommendSessionControllerSubmitAnswerResponseMock =
  (): RecommendSessionControllerSubmitAnswer201 =>
    faker.helpers.arrayElement([
      {
        id: faker.string.alpha(20),
        sessionId: faker.string.alpha(20),
        step: faker.helpers.arrayElement([2, 3, 4] as const),
        question: faker.string.alpha(20),
        options: Array.from(
          { length: faker.number.int({ min: 4, max: 4 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha(20)),
        type: faker.helpers.arrayElement(["setup"] as const),
      },
      {
        id: faker.string.alpha(20),
        sessionId: faker.string.alpha(20),
        step: faker.helpers.arrayElement([5] as const),
        question: faker.string.alpha(20),
        options: Array.from(
          { length: faker.number.int({ min: 4, max: 4 }) },
          (_, i) => i + 1,
        ).map(() => ({
          key: faker.string.alpha(20),
          title: faker.string.alpha(20),
          description: faker.string.alpha(20),
        })),
        type: faker.helpers.arrayElement(["occasion"] as const),
        description: faker.string.alpha(20),
      },
      {
        id: faker.string.alpha(20),
        sessionId: faker.string.alpha(20),
        step: faker.helpers.arrayElement([6, 7, 8, 9] as const),
        question: faker.string.alpha(20),
        options: Array.from(
          { length: faker.number.int({ min: 4, max: 4 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha(20)),
        type: faker.helpers.arrayElement(["question"] as const),
      },
      Array.from(
        { length: faker.number.int({ min: 4, max: 4 }) },
        (_, i) => i + 1,
      ).map(() => ({
        product: {
          id: faker.number.int({ min: undefined, max: undefined }),
          name: faker.string.alpha(20),
          url: faker.string.alpha(20),
          imageUrl: faker.string.alpha(20),
          category: faker.string.alpha(20),
          brand: faker.string.alpha(20),
          price: faker.number.int({ min: undefined, max: undefined }),
          priceRange: faker.string.alpha(20),
          ageRange: faker.string.alpha(20),
          situation: Array.from(
            { length: faker.number.int({ min: 4, max: 4 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha(20)),
          intention: Array.from(
            { length: faker.number.int({ min: 4, max: 4 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha(20)),
          friendshipLevel: Array.from(
            { length: faker.number.int({ min: 4, max: 4 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha(20)),
          targetGender: faker.string.alpha(20),
          tags: Array.from(
            { length: faker.number.int({ min: 4, max: 4 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha(20)),
          nextPickProductIds: Array.from(
            { length: faker.number.int({ min: 4, max: 4 }) },
            (_, i) => i + 1,
          ).map(() => faker.number.int({ min: undefined, max: undefined })),
        },
        reason: faker.string.alpha(20),
        minifiedReason: faker.string.alpha(20),
        order: faker.number.int({ min: undefined, max: undefined }),
      })),
    ]);

export const getAuthControllerLoginWithSocialMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/api/v1/auth/login/social", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getAuthControllerRefreshTokenMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/api/v1/auth/token/refresh", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getPostControllerGetPostsMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/api/v1/post", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getProductControllerGetProductMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/api/v1/product/:id", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getUserControllerGetMyProfileMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/api/v1/user/me", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getRecommendSessionControllerGetRecommendSessionResultsMockHandler =
  (
    overrideResponse?:
      | void
      | ((
          info: Parameters<Parameters<typeof http.get>[1]>[0],
        ) => Promise<void> | void),
  ) => {
    return http.get(
      "*/api/v1/recommend-session/:sessionId/result",
      async (info) => {
        await delay(500);
        if (typeof overrideResponse === "function") {
          await overrideResponse(info);
        }
        return new HttpResponse(null, { status: 200 });
      },
    );
  };

export const getRecommendSessionControllerGetRecommendSessionResultOneMockHandler =
  (
    overrideResponse?:
      | void
      | ((
          info: Parameters<Parameters<typeof http.get>[1]>[0],
        ) => Promise<void> | void),
  ) => {
    return http.get(
      "*/api/v1/recommend-session/:sessionId/result/:order",
      async (info) => {
        await delay(500);
        if (typeof overrideResponse === "function") {
          await overrideResponse(info);
        }
        return new HttpResponse(null, { status: 200 });
      },
    );
  };

export const getRecommendSessionControllerStartSessionMockHandler = (
  overrideResponse?:
    | RecommendSessionControllerStartSession201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<RecommendSessionControllerStartSession201>
        | RecommendSessionControllerStartSession201),
) => {
  return http.post("*/api/v1/recommend-session", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getRecommendSessionControllerStartSessionResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getRecommendSessionControllerSubmitAnswerMockHandler = (
  overrideResponse?:
    | RecommendSessionControllerSubmitAnswer201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<RecommendSessionControllerSubmitAnswer201>
        | RecommendSessionControllerSubmitAnswer201),
) => {
  return http.post(
    "*/api/v1/recommend-session/:sessionId/answer",
    async (info) => {
      await delay(500);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getRecommendSessionControllerSubmitAnswerResponseMock(),
        ),
        { status: 201, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getRecommendSessionControllerEndSessionMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete("*/api/v1/recommend-session/:sessionId", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};
export const getPockeyAPIDocumentationMock = () => [
  getAuthControllerLoginWithSocialMockHandler(),
  getAuthControllerRefreshTokenMockHandler(),
  getPostControllerGetPostsMockHandler(),
  getProductControllerGetProductMockHandler(),
  getUserControllerGetMyProfileMockHandler(),
  getRecommendSessionControllerGetRecommendSessionResultsMockHandler(),
  getRecommendSessionControllerGetRecommendSessionResultOneMockHandler(),
  getRecommendSessionControllerStartSessionMockHandler(),
  getRecommendSessionControllerSubmitAnswerMockHandler(),
  getRecommendSessionControllerEndSessionMockHandler(),
];
