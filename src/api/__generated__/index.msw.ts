/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Pockey API Documentation
 * API documentation for the Pockey application
 * OpenAPI spec version: 1.0
 */
import { delay, HttpResponse, http } from "msw";

export const getAuthControllerLoginMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/api/v1/auth/login", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getAuthControllerRefreshTokenMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/api/v1/auth/token/refresh", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getAuthControllerUpdatePasswordMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.patch("*/api/v1/auth/password", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getPostControllerGetPostsMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/api/v1/post", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getProductControllerGetProductMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/api/v1/product/:id", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getUserControllerGetUserMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/api/v1/user/:id", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getUserControllerGetUsersMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/api/v1/user", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getUserControllerUpdateUserPasswordMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.patch("*/api/v1/user/:userId/password", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getRecommendSessionControllerStartSessionMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/api/v1/recommend-session", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getRecommendSessionControllerSubmitAnswerMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post(
    "*/api/v1/recommend-session/:sessionId/answer",
    async (info) => {
      await delay(500);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 201 });
    },
  );
};

export const getRecommendSessionControllerEndSessionMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete("*/api/v1/recommend-session/:sessionId", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};
export const getPockeyAPIDocumentationMock = () => [
  getAuthControllerLoginMockHandler(),
  getAuthControllerRefreshTokenMockHandler(),
  getAuthControllerUpdatePasswordMockHandler(),
  getPostControllerGetPostsMockHandler(),
  getProductControllerGetProductMockHandler(),
  getUserControllerGetUserMockHandler(),
  getUserControllerGetUsersMockHandler(),
  getUserControllerUpdateUserPasswordMockHandler(),
  getRecommendSessionControllerStartSessionMockHandler(),
  getRecommendSessionControllerSubmitAnswerMockHandler(),
  getRecommendSessionControllerEndSessionMockHandler(),
];
