/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * Pockey API Documentation
 * API documentation for the Pockey application
 * OpenAPI spec version: 1.0
 */

import { http } from "../http";
import type {
  LoginCommand,
  UpdatePasswordCommand,
  UpdateUserPasswordCommand,
  UserControllerGetUser200,
  UserControllerGetUsersParams,
} from "./index.schemas";

export type authControllerLoginResponse201 = {
  data: undefined;
  status: 201;
};

export type authControllerLoginResponseComposite =
  authControllerLoginResponse201;

export type authControllerLoginResponse =
  authControllerLoginResponseComposite & {
    headers: Headers;
  };

export const getAuthControllerLoginUrl = () => {
  return `https://api-dev.pockey.pics/api/v1/auth/login`;
};

export const authControllerLogin = async (
  loginCommand: LoginCommand,
  options?: RequestInit,
): Promise<authControllerLoginResponse> => {
  return http<authControllerLoginResponse>(getAuthControllerLoginUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(loginCommand),
  });
};

export type authControllerRefreshTokenResponse201 = {
  data: undefined;
  status: 201;
};

export type authControllerRefreshTokenResponseComposite =
  authControllerRefreshTokenResponse201;

export type authControllerRefreshTokenResponse =
  authControllerRefreshTokenResponseComposite & {
    headers: Headers;
  };

export const getAuthControllerRefreshTokenUrl = () => {
  return `https://api-dev.pockey.pics/api/v1/auth/token/refresh`;
};

export const authControllerRefreshToken = async (
  options?: RequestInit,
): Promise<authControllerRefreshTokenResponse> => {
  return http<authControllerRefreshTokenResponse>(
    getAuthControllerRefreshTokenUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

export type authControllerUpdatePasswordResponse200 = {
  data: undefined;
  status: 200;
};

export type authControllerUpdatePasswordResponseComposite =
  authControllerUpdatePasswordResponse200;

export type authControllerUpdatePasswordResponse =
  authControllerUpdatePasswordResponseComposite & {
    headers: Headers;
  };

export const getAuthControllerUpdatePasswordUrl = () => {
  return `https://api-dev.pockey.pics/api/v1/auth/password`;
};

export const authControllerUpdatePassword = async (
  updatePasswordCommand: UpdatePasswordCommand,
  options?: RequestInit,
): Promise<authControllerUpdatePasswordResponse> => {
  return http<authControllerUpdatePasswordResponse>(
    getAuthControllerUpdatePasswordUrl(),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(updatePasswordCommand),
    },
  );
};

export type userControllerGetUserResponse200 = {
  data: UserControllerGetUser200;
  status: 200;
};

export type userControllerGetUserResponseComposite =
  userControllerGetUserResponse200;

export type userControllerGetUserResponse =
  userControllerGetUserResponseComposite & {
    headers: Headers;
  };

export const getUserControllerGetUserUrl = (id: string) => {
  return `https://api-dev.pockey.pics/api/v1/user/${id}`;
};

export const userControllerGetUser = async (
  id: string,
  options?: RequestInit,
): Promise<userControllerGetUserResponse> => {
  return http<userControllerGetUserResponse>(getUserControllerGetUserUrl(id), {
    ...options,
    method: "GET",
  });
};

export type userControllerGetUsersResponse200 = {
  data: undefined;
  status: 200;
};

export type userControllerGetUsersResponseComposite =
  userControllerGetUsersResponse200;

export type userControllerGetUsersResponse =
  userControllerGetUsersResponseComposite & {
    headers: Headers;
  };

export const getUserControllerGetUsersUrl = (
  params: UserControllerGetUsersParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api-dev.pockey.pics/api/v1/user?${stringifiedParams}`
    : `https://api-dev.pockey.pics/api/v1/user`;
};

export const userControllerGetUsers = async (
  params: UserControllerGetUsersParams,
  options?: RequestInit,
): Promise<userControllerGetUsersResponse> => {
  return http<userControllerGetUsersResponse>(
    getUserControllerGetUsersUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export type userControllerUpdateUserPasswordResponse200 = {
  data: undefined;
  status: 200;
};

export type userControllerUpdateUserPasswordResponseComposite =
  userControllerUpdateUserPasswordResponse200;

export type userControllerUpdateUserPasswordResponse =
  userControllerUpdateUserPasswordResponseComposite & {
    headers: Headers;
  };

export const getUserControllerUpdateUserPasswordUrl = (userId: string) => {
  return `https://api-dev.pockey.pics/api/v1/user/${userId}/password`;
};

export const userControllerUpdateUserPassword = async (
  userId: string,
  updateUserPasswordCommand: UpdateUserPasswordCommand,
  options?: RequestInit,
): Promise<userControllerUpdateUserPasswordResponse> => {
  return http<userControllerUpdateUserPasswordResponse>(
    getUserControllerUpdateUserPasswordUrl(userId),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(updateUserPasswordCommand),
    },
  );
};
