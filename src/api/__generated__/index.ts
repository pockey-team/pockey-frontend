/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Pockey API Documentation
 * API documentation for the Pockey application
 * OpenAPI spec version: 1.0
 */

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import { http } from "../http";
import type {
  LoginCommand,
  PostControllerGetPostsParams,
  SubmitAnswerRequest,
  UpdatePasswordCommand,
  UpdateUserPasswordCommand,
  UserControllerGetUsersParams,
} from "./index.schemas";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type authControllerLoginResponse201 = {
  data: undefined;
  status: 201;
};

export type authControllerLoginResponseComposite =
  authControllerLoginResponse201;

export type authControllerLoginResponse =
  authControllerLoginResponseComposite & {
    headers: Headers;
  };

export const getAuthControllerLoginUrl = () => {
  return `https://api-dev.pockey.pics/api/v1/auth/login`;
};

export const authControllerLogin = async (
  loginCommand: LoginCommand,
  options?: RequestInit,
): Promise<authControllerLoginResponse> => {
  return http<authControllerLoginResponse>(getAuthControllerLoginUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(loginCommand),
  });
};

export const getAuthControllerLoginMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: LoginCommand },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: LoginCommand },
  TContext
> => {
  const mutationKey = ["authControllerLogin"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogin>>,
    { data: LoginCommand }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogin>>
>;
export type AuthControllerLoginMutationBody = LoginCommand;
export type AuthControllerLoginMutationError = unknown;

export const useAuthControllerLogin = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerLogin>>,
      TError,
      { data: LoginCommand },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: LoginCommand },
  TContext
> => {
  const mutationOptions = getAuthControllerLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type authControllerRefreshTokenResponse201 = {
  data: undefined;
  status: 201;
};

export type authControllerRefreshTokenResponseComposite =
  authControllerRefreshTokenResponse201;

export type authControllerRefreshTokenResponse =
  authControllerRefreshTokenResponseComposite & {
    headers: Headers;
  };

export const getAuthControllerRefreshTokenUrl = () => {
  return `https://api-dev.pockey.pics/api/v1/auth/token/refresh`;
};

export const authControllerRefreshToken = async (
  options?: RequestInit,
): Promise<authControllerRefreshTokenResponse> => {
  return http<authControllerRefreshTokenResponse>(
    getAuthControllerRefreshTokenUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getAuthControllerRefreshTokenMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRefreshToken>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerRefreshToken>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["authControllerRefreshToken"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRefreshToken>>,
    void
  > = () => {
    return authControllerRefreshToken(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerRefreshTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRefreshToken>>
>;

export type AuthControllerRefreshTokenMutationError = unknown;

export const useAuthControllerRefreshToken = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerRefreshToken>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerRefreshToken>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAuthControllerRefreshTokenMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type authControllerUpdatePasswordResponse200 = {
  data: undefined;
  status: 200;
};

export type authControllerUpdatePasswordResponseComposite =
  authControllerUpdatePasswordResponse200;

export type authControllerUpdatePasswordResponse =
  authControllerUpdatePasswordResponseComposite & {
    headers: Headers;
  };

export const getAuthControllerUpdatePasswordUrl = () => {
  return `https://api-dev.pockey.pics/api/v1/auth/password`;
};

export const authControllerUpdatePassword = async (
  updatePasswordCommand: UpdatePasswordCommand,
  options?: RequestInit,
): Promise<authControllerUpdatePasswordResponse> => {
  return http<authControllerUpdatePasswordResponse>(
    getAuthControllerUpdatePasswordUrl(),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(updatePasswordCommand),
    },
  );
};

export const getAuthControllerUpdatePasswordMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerUpdatePassword>>,
    TError,
    { data: UpdatePasswordCommand },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerUpdatePassword>>,
  TError,
  { data: UpdatePasswordCommand },
  TContext
> => {
  const mutationKey = ["authControllerUpdatePassword"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerUpdatePassword>>,
    { data: UpdatePasswordCommand }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerUpdatePassword(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerUpdatePasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerUpdatePassword>>
>;
export type AuthControllerUpdatePasswordMutationBody = UpdatePasswordCommand;
export type AuthControllerUpdatePasswordMutationError = unknown;

export const useAuthControllerUpdatePassword = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerUpdatePassword>>,
      TError,
      { data: UpdatePasswordCommand },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerUpdatePassword>>,
  TError,
  { data: UpdatePasswordCommand },
  TContext
> => {
  const mutationOptions =
    getAuthControllerUpdatePasswordMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type postControllerGetPostsResponse200 = {
  data: undefined;
  status: 200;
};

export type postControllerGetPostsResponseComposite =
  postControllerGetPostsResponse200;

export type postControllerGetPostsResponse =
  postControllerGetPostsResponseComposite & {
    headers: Headers;
  };

export const getPostControllerGetPostsUrl = (
  params: PostControllerGetPostsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api-dev.pockey.pics/api/v1/post?${stringifiedParams}`
    : `https://api-dev.pockey.pics/api/v1/post`;
};

export const postControllerGetPosts = async (
  params: PostControllerGetPostsParams,
  options?: RequestInit,
): Promise<postControllerGetPostsResponse> => {
  return http<postControllerGetPostsResponse>(
    getPostControllerGetPostsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getPostControllerGetPostsQueryKey = (
  params: PostControllerGetPostsParams,
) => {
  return [
    `https://api-dev.pockey.pics/api/v1/post`,
    ...(params ? [params] : []),
  ] as const;
};

export const getPostControllerGetPostsQueryOptions = <
  TData = Awaited<ReturnType<typeof postControllerGetPosts>>,
  TError = unknown,
>(
  params: PostControllerGetPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof postControllerGetPosts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getPostControllerGetPostsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof postControllerGetPosts>>
  > = ({ signal }) =>
    postControllerGetPosts(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof postControllerGetPosts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PostControllerGetPostsQueryResult = NonNullable<
  Awaited<ReturnType<typeof postControllerGetPosts>>
>;
export type PostControllerGetPostsQueryError = unknown;

export function usePostControllerGetPosts<
  TData = Awaited<ReturnType<typeof postControllerGetPosts>>,
  TError = unknown,
>(
  params: PostControllerGetPostsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof postControllerGetPosts>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof postControllerGetPosts>>,
          TError,
          Awaited<ReturnType<typeof postControllerGetPosts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePostControllerGetPosts<
  TData = Awaited<ReturnType<typeof postControllerGetPosts>>,
  TError = unknown,
>(
  params: PostControllerGetPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof postControllerGetPosts>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof postControllerGetPosts>>,
          TError,
          Awaited<ReturnType<typeof postControllerGetPosts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePostControllerGetPosts<
  TData = Awaited<ReturnType<typeof postControllerGetPosts>>,
  TError = unknown,
>(
  params: PostControllerGetPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof postControllerGetPosts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function usePostControllerGetPosts<
  TData = Awaited<ReturnType<typeof postControllerGetPosts>>,
  TError = unknown,
>(
  params: PostControllerGetPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof postControllerGetPosts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getPostControllerGetPostsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchPostControllerGetPosts = async <
  TData = Awaited<ReturnType<typeof postControllerGetPosts>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  params: PostControllerGetPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof postControllerGetPosts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getPostControllerGetPostsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export type productControllerGetProductResponse200 = {
  data: undefined;
  status: 200;
};

export type productControllerGetProductResponseComposite =
  productControllerGetProductResponse200;

export type productControllerGetProductResponse =
  productControllerGetProductResponseComposite & {
    headers: Headers;
  };

export const getProductControllerGetProductUrl = (id: number) => {
  return `https://api-dev.pockey.pics/api/v1/product/${id}`;
};

export const productControllerGetProduct = async (
  id: number,
  options?: RequestInit,
): Promise<productControllerGetProductResponse> => {
  return http<productControllerGetProductResponse>(
    getProductControllerGetProductUrl(id),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getProductControllerGetProductQueryKey = (id: number) => {
  return [`https://api-dev.pockey.pics/api/v1/product/${id}`] as const;
};

export const getProductControllerGetProductQueryOptions = <
  TData = Awaited<ReturnType<typeof productControllerGetProduct>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productControllerGetProduct>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getProductControllerGetProductQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof productControllerGetProduct>>
  > = ({ signal }) =>
    productControllerGetProduct(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof productControllerGetProduct>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ProductControllerGetProductQueryResult = NonNullable<
  Awaited<ReturnType<typeof productControllerGetProduct>>
>;
export type ProductControllerGetProductQueryError = unknown;

export function useProductControllerGetProduct<
  TData = Awaited<ReturnType<typeof productControllerGetProduct>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productControllerGetProduct>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof productControllerGetProduct>>,
          TError,
          Awaited<ReturnType<typeof productControllerGetProduct>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useProductControllerGetProduct<
  TData = Awaited<ReturnType<typeof productControllerGetProduct>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productControllerGetProduct>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof productControllerGetProduct>>,
          TError,
          Awaited<ReturnType<typeof productControllerGetProduct>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useProductControllerGetProduct<
  TData = Awaited<ReturnType<typeof productControllerGetProduct>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productControllerGetProduct>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useProductControllerGetProduct<
  TData = Awaited<ReturnType<typeof productControllerGetProduct>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productControllerGetProduct>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getProductControllerGetProductQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchProductControllerGetProduct = async <
  TData = Awaited<ReturnType<typeof productControllerGetProduct>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productControllerGetProduct>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getProductControllerGetProductQueryOptions(id, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export type userControllerGetUserResponse200 = {
  data: undefined;
  status: 200;
};

export type userControllerGetUserResponseComposite =
  userControllerGetUserResponse200;

export type userControllerGetUserResponse =
  userControllerGetUserResponseComposite & {
    headers: Headers;
  };

export const getUserControllerGetUserUrl = (id: string) => {
  return `https://api-dev.pockey.pics/api/v1/user/${id}`;
};

export const userControllerGetUser = async (
  id: string,
  options?: RequestInit,
): Promise<userControllerGetUserResponse> => {
  return http<userControllerGetUserResponse>(getUserControllerGetUserUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getUserControllerGetUserQueryKey = (id: string) => {
  return [`https://api-dev.pockey.pics/api/v1/user/${id}`] as const;
};

export const getUserControllerGetUserQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerGetUser>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUserControllerGetUserQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerGetUser>>
  > = ({ signal }) => userControllerGetUser(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerGetUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerGetUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerGetUser>>
>;
export type UserControllerGetUserQueryError = unknown;

export function useUserControllerGetUser<
  TData = Awaited<ReturnType<typeof userControllerGetUser>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUser>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerGetUser>>,
          TError,
          Awaited<ReturnType<typeof userControllerGetUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerGetUser<
  TData = Awaited<ReturnType<typeof userControllerGetUser>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUser>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerGetUser>>,
          TError,
          Awaited<ReturnType<typeof userControllerGetUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerGetUser<
  TData = Awaited<ReturnType<typeof userControllerGetUser>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useUserControllerGetUser<
  TData = Awaited<ReturnType<typeof userControllerGetUser>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUserControllerGetUserQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchUserControllerGetUser = async <
  TData = Awaited<ReturnType<typeof userControllerGetUser>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getUserControllerGetUserQueryOptions(id, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export type userControllerGetUsersResponse200 = {
  data: undefined;
  status: 200;
};

export type userControllerGetUsersResponseComposite =
  userControllerGetUsersResponse200;

export type userControllerGetUsersResponse =
  userControllerGetUsersResponseComposite & {
    headers: Headers;
  };

export const getUserControllerGetUsersUrl = (
  params: UserControllerGetUsersParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api-dev.pockey.pics/api/v1/user?${stringifiedParams}`
    : `https://api-dev.pockey.pics/api/v1/user`;
};

export const userControllerGetUsers = async (
  params: UserControllerGetUsersParams,
  options?: RequestInit,
): Promise<userControllerGetUsersResponse> => {
  return http<userControllerGetUsersResponse>(
    getUserControllerGetUsersUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getUserControllerGetUsersQueryKey = (
  params: UserControllerGetUsersParams,
) => {
  return [
    `https://api-dev.pockey.pics/api/v1/user`,
    ...(params ? [params] : []),
  ] as const;
};

export const getUserControllerGetUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerGetUsers>>,
  TError = unknown,
>(
  params: UserControllerGetUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUsers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUserControllerGetUsersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerGetUsers>>
  > = ({ signal }) =>
    userControllerGetUsers(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerGetUsers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerGetUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerGetUsers>>
>;
export type UserControllerGetUsersQueryError = unknown;

export function useUserControllerGetUsers<
  TData = Awaited<ReturnType<typeof userControllerGetUsers>>,
  TError = unknown,
>(
  params: UserControllerGetUsersParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUsers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerGetUsers>>,
          TError,
          Awaited<ReturnType<typeof userControllerGetUsers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerGetUsers<
  TData = Awaited<ReturnType<typeof userControllerGetUsers>>,
  TError = unknown,
>(
  params: UserControllerGetUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUsers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerGetUsers>>,
          TError,
          Awaited<ReturnType<typeof userControllerGetUsers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerGetUsers<
  TData = Awaited<ReturnType<typeof userControllerGetUsers>>,
  TError = unknown,
>(
  params: UserControllerGetUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUsers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useUserControllerGetUsers<
  TData = Awaited<ReturnType<typeof userControllerGetUsers>>,
  TError = unknown,
>(
  params: UserControllerGetUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUsers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUserControllerGetUsersQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchUserControllerGetUsers = async <
  TData = Awaited<ReturnType<typeof userControllerGetUsers>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  params: UserControllerGetUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUsers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getUserControllerGetUsersQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export type userControllerUpdateUserPasswordResponse200 = {
  data: undefined;
  status: 200;
};

export type userControllerUpdateUserPasswordResponseComposite =
  userControllerUpdateUserPasswordResponse200;

export type userControllerUpdateUserPasswordResponse =
  userControllerUpdateUserPasswordResponseComposite & {
    headers: Headers;
  };

export const getUserControllerUpdateUserPasswordUrl = (userId: string) => {
  return `https://api-dev.pockey.pics/api/v1/user/${userId}/password`;
};

export const userControllerUpdateUserPassword = async (
  userId: string,
  updateUserPasswordCommand: UpdateUserPasswordCommand,
  options?: RequestInit,
): Promise<userControllerUpdateUserPasswordResponse> => {
  return http<userControllerUpdateUserPasswordResponse>(
    getUserControllerUpdateUserPasswordUrl(userId),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(updateUserPasswordCommand),
    },
  );
};

export const getUserControllerUpdateUserPasswordMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerUpdateUserPassword>>,
    TError,
    { userId: string; data: UpdateUserPasswordCommand },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerUpdateUserPassword>>,
  TError,
  { userId: string; data: UpdateUserPasswordCommand },
  TContext
> => {
  const mutationKey = ["userControllerUpdateUserPassword"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerUpdateUserPassword>>,
    { userId: string; data: UpdateUserPasswordCommand }
  > = (props) => {
    const { userId, data } = props ?? {};

    return userControllerUpdateUserPassword(userId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerUpdateUserPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerUpdateUserPassword>>
>;
export type UserControllerUpdateUserPasswordMutationBody =
  UpdateUserPasswordCommand;
export type UserControllerUpdateUserPasswordMutationError = unknown;

export const useUserControllerUpdateUserPassword = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerUpdateUserPassword>>,
      TError,
      { userId: string; data: UpdateUserPasswordCommand },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerUpdateUserPassword>>,
  TError,
  { userId: string; data: UpdateUserPasswordCommand },
  TContext
> => {
  const mutationOptions =
    getUserControllerUpdateUserPasswordMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type recommendSessionControllerStartSessionResponse201 = {
  data: undefined;
  status: 201;
};

export type recommendSessionControllerStartSessionResponseComposite =
  recommendSessionControllerStartSessionResponse201;

export type recommendSessionControllerStartSessionResponse =
  recommendSessionControllerStartSessionResponseComposite & {
    headers: Headers;
  };

export const getRecommendSessionControllerStartSessionUrl = () => {
  return `https://api-dev.pockey.pics/api/v1/recommend-session`;
};

export const recommendSessionControllerStartSession = async (
  options?: RequestInit,
): Promise<recommendSessionControllerStartSessionResponse> => {
  return http<recommendSessionControllerStartSessionResponse>(
    getRecommendSessionControllerStartSessionUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getRecommendSessionControllerStartSessionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof recommendSessionControllerStartSession>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof recommendSessionControllerStartSession>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["recommendSessionControllerStartSession"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof recommendSessionControllerStartSession>>,
    void
  > = () => {
    return recommendSessionControllerStartSession(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RecommendSessionControllerStartSessionMutationResult = NonNullable<
  Awaited<ReturnType<typeof recommendSessionControllerStartSession>>
>;

export type RecommendSessionControllerStartSessionMutationError = unknown;

export const useRecommendSessionControllerStartSession = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof recommendSessionControllerStartSession>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof recommendSessionControllerStartSession>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getRecommendSessionControllerStartSessionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type recommendSessionControllerSubmitAnswerResponse201 = {
  data: undefined;
  status: 201;
};

export type recommendSessionControllerSubmitAnswerResponseComposite =
  recommendSessionControllerSubmitAnswerResponse201;

export type recommendSessionControllerSubmitAnswerResponse =
  recommendSessionControllerSubmitAnswerResponseComposite & {
    headers: Headers;
  };

export const getRecommendSessionControllerSubmitAnswerUrl = (
  sessionId: string,
) => {
  return `https://api-dev.pockey.pics/api/v1/recommend-session/${sessionId}/answer`;
};

export const recommendSessionControllerSubmitAnswer = async (
  sessionId: string,
  submitAnswerRequest: SubmitAnswerRequest,
  options?: RequestInit,
): Promise<recommendSessionControllerSubmitAnswerResponse> => {
  return http<recommendSessionControllerSubmitAnswerResponse>(
    getRecommendSessionControllerSubmitAnswerUrl(sessionId),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(submitAnswerRequest),
    },
  );
};

export const getRecommendSessionControllerSubmitAnswerMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof recommendSessionControllerSubmitAnswer>>,
    TError,
    { sessionId: string; data: SubmitAnswerRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof recommendSessionControllerSubmitAnswer>>,
  TError,
  { sessionId: string; data: SubmitAnswerRequest },
  TContext
> => {
  const mutationKey = ["recommendSessionControllerSubmitAnswer"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof recommendSessionControllerSubmitAnswer>>,
    { sessionId: string; data: SubmitAnswerRequest }
  > = (props) => {
    const { sessionId, data } = props ?? {};

    return recommendSessionControllerSubmitAnswer(
      sessionId,
      data,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type RecommendSessionControllerSubmitAnswerMutationResult = NonNullable<
  Awaited<ReturnType<typeof recommendSessionControllerSubmitAnswer>>
>;
export type RecommendSessionControllerSubmitAnswerMutationBody =
  SubmitAnswerRequest;
export type RecommendSessionControllerSubmitAnswerMutationError = unknown;

export const useRecommendSessionControllerSubmitAnswer = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof recommendSessionControllerSubmitAnswer>>,
      TError,
      { sessionId: string; data: SubmitAnswerRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof recommendSessionControllerSubmitAnswer>>,
  TError,
  { sessionId: string; data: SubmitAnswerRequest },
  TContext
> => {
  const mutationOptions =
    getRecommendSessionControllerSubmitAnswerMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type recommendSessionControllerEndSessionResponse200 = {
  data: undefined;
  status: 200;
};

export type recommendSessionControllerEndSessionResponseComposite =
  recommendSessionControllerEndSessionResponse200;

export type recommendSessionControllerEndSessionResponse =
  recommendSessionControllerEndSessionResponseComposite & {
    headers: Headers;
  };

export const getRecommendSessionControllerEndSessionUrl = (
  sessionId: string,
) => {
  return `https://api-dev.pockey.pics/api/v1/recommend-session/${sessionId}`;
};

export const recommendSessionControllerEndSession = async (
  sessionId: string,
  options?: RequestInit,
): Promise<recommendSessionControllerEndSessionResponse> => {
  return http<recommendSessionControllerEndSessionResponse>(
    getRecommendSessionControllerEndSessionUrl(sessionId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getRecommendSessionControllerEndSessionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof recommendSessionControllerEndSession>>,
    TError,
    { sessionId: string },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof recommendSessionControllerEndSession>>,
  TError,
  { sessionId: string },
  TContext
> => {
  const mutationKey = ["recommendSessionControllerEndSession"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof recommendSessionControllerEndSession>>,
    { sessionId: string }
  > = (props) => {
    const { sessionId } = props ?? {};

    return recommendSessionControllerEndSession(sessionId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RecommendSessionControllerEndSessionMutationResult = NonNullable<
  Awaited<ReturnType<typeof recommendSessionControllerEndSession>>
>;

export type RecommendSessionControllerEndSessionMutationError = unknown;

export const useRecommendSessionControllerEndSession = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof recommendSessionControllerEndSession>>,
      TError,
      { sessionId: string },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof recommendSessionControllerEndSession>>,
  TError,
  { sessionId: string },
  TContext
> => {
  const mutationOptions =
    getRecommendSessionControllerEndSessionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
