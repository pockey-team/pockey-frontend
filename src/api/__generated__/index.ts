/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Pockey API Documentation
 * API documentation for the Pockey application
 * OpenAPI spec version: 1.0
 */

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import { http } from "../http";
import type {
  PostControllerGetPostsParams,
  RecommendSessionControllerStartSession201,
  RecommendSessionControllerSubmitAnswer201,
  SocialLoginCommand,
  StartSessionRequest,
  SubmitAnswerRequest,
} from "./index.schemas";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type authControllerLoginWithSocialResponse201 = {
  data: undefined;
  status: 201;
};

export type authControllerLoginWithSocialResponseComposite =
  authControllerLoginWithSocialResponse201;

export type authControllerLoginWithSocialResponse =
  authControllerLoginWithSocialResponseComposite & {
    headers: Headers;
  };

export const getAuthControllerLoginWithSocialUrl = () => {
  return `https://api-dev.pockey.pics/api/v1/auth/login/social`;
};

export const authControllerLoginWithSocial = async (
  socialLoginCommand: SocialLoginCommand,
  options?: RequestInit,
): Promise<authControllerLoginWithSocialResponse> => {
  return http<authControllerLoginWithSocialResponse>(
    getAuthControllerLoginWithSocialUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(socialLoginCommand),
    },
  );
};

export const getAuthControllerLoginWithSocialMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLoginWithSocial>>,
    TError,
    { data: SocialLoginCommand },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLoginWithSocial>>,
  TError,
  { data: SocialLoginCommand },
  TContext
> => {
  const mutationKey = ["authControllerLoginWithSocial"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLoginWithSocial>>,
    { data: SocialLoginCommand }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerLoginWithSocial(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerLoginWithSocialMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLoginWithSocial>>
>;
export type AuthControllerLoginWithSocialMutationBody = SocialLoginCommand;
export type AuthControllerLoginWithSocialMutationError = unknown;

export const useAuthControllerLoginWithSocial = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerLoginWithSocial>>,
      TError,
      { data: SocialLoginCommand },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerLoginWithSocial>>,
  TError,
  { data: SocialLoginCommand },
  TContext
> => {
  const mutationOptions =
    getAuthControllerLoginWithSocialMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type authControllerRefreshTokenResponse201 = {
  data: undefined;
  status: 201;
};

export type authControllerRefreshTokenResponseComposite =
  authControllerRefreshTokenResponse201;

export type authControllerRefreshTokenResponse =
  authControllerRefreshTokenResponseComposite & {
    headers: Headers;
  };

export const getAuthControllerRefreshTokenUrl = () => {
  return `https://api-dev.pockey.pics/api/v1/auth/token/refresh`;
};

export const authControllerRefreshToken = async (
  options?: RequestInit,
): Promise<authControllerRefreshTokenResponse> => {
  return http<authControllerRefreshTokenResponse>(
    getAuthControllerRefreshTokenUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getAuthControllerRefreshTokenMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRefreshToken>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerRefreshToken>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["authControllerRefreshToken"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRefreshToken>>,
    void
  > = () => {
    return authControllerRefreshToken(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerRefreshTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRefreshToken>>
>;

export type AuthControllerRefreshTokenMutationError = unknown;

export const useAuthControllerRefreshToken = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerRefreshToken>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerRefreshToken>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAuthControllerRefreshTokenMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type postControllerGetPostsResponse200 = {
  data: undefined;
  status: 200;
};

export type postControllerGetPostsResponseComposite =
  postControllerGetPostsResponse200;

export type postControllerGetPostsResponse =
  postControllerGetPostsResponseComposite & {
    headers: Headers;
  };

export const getPostControllerGetPostsUrl = (
  params: PostControllerGetPostsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api-dev.pockey.pics/api/v1/post?${stringifiedParams}`
    : `https://api-dev.pockey.pics/api/v1/post`;
};

export const postControllerGetPosts = async (
  params: PostControllerGetPostsParams,
  options?: RequestInit,
): Promise<postControllerGetPostsResponse> => {
  return http<postControllerGetPostsResponse>(
    getPostControllerGetPostsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getPostControllerGetPostsQueryKey = (
  params: PostControllerGetPostsParams,
) => {
  return [
    `https://api-dev.pockey.pics/api/v1/post`,
    ...(params ? [params] : []),
  ] as const;
};

export const getPostControllerGetPostsQueryOptions = <
  TData = Awaited<ReturnType<typeof postControllerGetPosts>>,
  TError = unknown,
>(
  params: PostControllerGetPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof postControllerGetPosts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getPostControllerGetPostsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof postControllerGetPosts>>
  > = ({ signal }) =>
    postControllerGetPosts(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof postControllerGetPosts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PostControllerGetPostsQueryResult = NonNullable<
  Awaited<ReturnType<typeof postControllerGetPosts>>
>;
export type PostControllerGetPostsQueryError = unknown;

export function usePostControllerGetPosts<
  TData = Awaited<ReturnType<typeof postControllerGetPosts>>,
  TError = unknown,
>(
  params: PostControllerGetPostsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof postControllerGetPosts>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof postControllerGetPosts>>,
          TError,
          Awaited<ReturnType<typeof postControllerGetPosts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePostControllerGetPosts<
  TData = Awaited<ReturnType<typeof postControllerGetPosts>>,
  TError = unknown,
>(
  params: PostControllerGetPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof postControllerGetPosts>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof postControllerGetPosts>>,
          TError,
          Awaited<ReturnType<typeof postControllerGetPosts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePostControllerGetPosts<
  TData = Awaited<ReturnType<typeof postControllerGetPosts>>,
  TError = unknown,
>(
  params: PostControllerGetPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof postControllerGetPosts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function usePostControllerGetPosts<
  TData = Awaited<ReturnType<typeof postControllerGetPosts>>,
  TError = unknown,
>(
  params: PostControllerGetPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof postControllerGetPosts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getPostControllerGetPostsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchPostControllerGetPostsQuery = async <
  TData = Awaited<ReturnType<typeof postControllerGetPosts>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  params: PostControllerGetPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof postControllerGetPosts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getPostControllerGetPostsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export type productControllerGetProductResponse200 = {
  data: undefined;
  status: 200;
};

export type productControllerGetProductResponseComposite =
  productControllerGetProductResponse200;

export type productControllerGetProductResponse =
  productControllerGetProductResponseComposite & {
    headers: Headers;
  };

export const getProductControllerGetProductUrl = (id: number) => {
  return `https://api-dev.pockey.pics/api/v1/product/${id}`;
};

export const productControllerGetProduct = async (
  id: number,
  options?: RequestInit,
): Promise<productControllerGetProductResponse> => {
  return http<productControllerGetProductResponse>(
    getProductControllerGetProductUrl(id),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getProductControllerGetProductQueryKey = (id: number) => {
  return [`https://api-dev.pockey.pics/api/v1/product/${id}`] as const;
};

export const getProductControllerGetProductQueryOptions = <
  TData = Awaited<ReturnType<typeof productControllerGetProduct>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productControllerGetProduct>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getProductControllerGetProductQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof productControllerGetProduct>>
  > = ({ signal }) =>
    productControllerGetProduct(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof productControllerGetProduct>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ProductControllerGetProductQueryResult = NonNullable<
  Awaited<ReturnType<typeof productControllerGetProduct>>
>;
export type ProductControllerGetProductQueryError = unknown;

export function useProductControllerGetProduct<
  TData = Awaited<ReturnType<typeof productControllerGetProduct>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productControllerGetProduct>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof productControllerGetProduct>>,
          TError,
          Awaited<ReturnType<typeof productControllerGetProduct>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useProductControllerGetProduct<
  TData = Awaited<ReturnType<typeof productControllerGetProduct>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productControllerGetProduct>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof productControllerGetProduct>>,
          TError,
          Awaited<ReturnType<typeof productControllerGetProduct>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useProductControllerGetProduct<
  TData = Awaited<ReturnType<typeof productControllerGetProduct>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productControllerGetProduct>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useProductControllerGetProduct<
  TData = Awaited<ReturnType<typeof productControllerGetProduct>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productControllerGetProduct>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getProductControllerGetProductQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchProductControllerGetProductQuery = async <
  TData = Awaited<ReturnType<typeof productControllerGetProduct>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productControllerGetProduct>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getProductControllerGetProductQueryOptions(id, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export type userControllerGetMyProfileResponse200 = {
  data: undefined;
  status: 200;
};

export type userControllerGetMyProfileResponseComposite =
  userControllerGetMyProfileResponse200;

export type userControllerGetMyProfileResponse =
  userControllerGetMyProfileResponseComposite & {
    headers: Headers;
  };

export const getUserControllerGetMyProfileUrl = () => {
  return `https://api-dev.pockey.pics/api/v1/user/me`;
};

export const userControllerGetMyProfile = async (
  options?: RequestInit,
): Promise<userControllerGetMyProfileResponse> => {
  return http<userControllerGetMyProfileResponse>(
    getUserControllerGetMyProfileUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getUserControllerGetMyProfileQueryKey = () => {
  return [`https://api-dev.pockey.pics/api/v1/user/me`] as const;
};

export const getUserControllerGetMyProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerGetMyProfile>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof userControllerGetMyProfile>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof http>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUserControllerGetMyProfileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerGetMyProfile>>
  > = ({ signal }) => userControllerGetMyProfile({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerGetMyProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerGetMyProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerGetMyProfile>>
>;
export type UserControllerGetMyProfileQueryError = unknown;

export function useUserControllerGetMyProfile<
  TData = Awaited<ReturnType<typeof userControllerGetMyProfile>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetMyProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerGetMyProfile>>,
          TError,
          Awaited<ReturnType<typeof userControllerGetMyProfile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerGetMyProfile<
  TData = Awaited<ReturnType<typeof userControllerGetMyProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetMyProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerGetMyProfile>>,
          TError,
          Awaited<ReturnType<typeof userControllerGetMyProfile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerGetMyProfile<
  TData = Awaited<ReturnType<typeof userControllerGetMyProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetMyProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useUserControllerGetMyProfile<
  TData = Awaited<ReturnType<typeof userControllerGetMyProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetMyProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUserControllerGetMyProfileQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchUserControllerGetMyProfileQuery = async <
  TData = Awaited<ReturnType<typeof userControllerGetMyProfile>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetMyProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getUserControllerGetMyProfileQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export type recommendSessionControllerGetRecommendSessionResultsResponse200 = {
  data: undefined;
  status: 200;
};

export type recommendSessionControllerGetRecommendSessionResultsResponseComposite =
  recommendSessionControllerGetRecommendSessionResultsResponse200;

export type recommendSessionControllerGetRecommendSessionResultsResponse =
  recommendSessionControllerGetRecommendSessionResultsResponseComposite & {
    headers: Headers;
  };

export const getRecommendSessionControllerGetRecommendSessionResultsUrl = (
  sessionId: string,
) => {
  return `https://api-dev.pockey.pics/api/v1/recommend-session/${sessionId}/result`;
};

export const recommendSessionControllerGetRecommendSessionResults = async (
  sessionId: string,
  options?: RequestInit,
): Promise<recommendSessionControllerGetRecommendSessionResultsResponse> => {
  return http<recommendSessionControllerGetRecommendSessionResultsResponse>(
    getRecommendSessionControllerGetRecommendSessionResultsUrl(sessionId),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getRecommendSessionControllerGetRecommendSessionResultsQueryKey = (
  sessionId: string,
) => {
  return [
    `https://api-dev.pockey.pics/api/v1/recommend-session/${sessionId}/result`,
  ] as const;
};

export const getRecommendSessionControllerGetRecommendSessionResultsQueryOptions =
  <
    TData = Awaited<
      ReturnType<typeof recommendSessionControllerGetRecommendSessionResults>
    >,
    TError = unknown,
  >(
    sessionId: string,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof recommendSessionControllerGetRecommendSessionResults
            >
          >,
          TError,
          TData
        >
      >;
      request?: SecondParameter<typeof http>;
    },
  ) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getRecommendSessionControllerGetRecommendSessionResultsQueryKey(
        sessionId,
      );

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<typeof recommendSessionControllerGetRecommendSessionResults>
      >
    > = ({ signal }) =>
      recommendSessionControllerGetRecommendSessionResults(sessionId, {
        signal,
        ...requestOptions,
      });

    return {
      queryKey,
      queryFn,
      enabled: !!sessionId,
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<typeof recommendSessionControllerGetRecommendSessionResults>
      >,
      TError,
      TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
  };

export type RecommendSessionControllerGetRecommendSessionResultsQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof recommendSessionControllerGetRecommendSessionResults>
    >
  >;
export type RecommendSessionControllerGetRecommendSessionResultsQueryError =
  unknown;

export function useRecommendSessionControllerGetRecommendSessionResults<
  TData = Awaited<
    ReturnType<typeof recommendSessionControllerGetRecommendSessionResults>
  >,
  TError = unknown,
>(
  sessionId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof recommendSessionControllerGetRecommendSessionResults
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof recommendSessionControllerGetRecommendSessionResults
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof recommendSessionControllerGetRecommendSessionResults
            >
          >
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRecommendSessionControllerGetRecommendSessionResults<
  TData = Awaited<
    ReturnType<typeof recommendSessionControllerGetRecommendSessionResults>
  >,
  TError = unknown,
>(
  sessionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof recommendSessionControllerGetRecommendSessionResults
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof recommendSessionControllerGetRecommendSessionResults
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof recommendSessionControllerGetRecommendSessionResults
            >
          >
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRecommendSessionControllerGetRecommendSessionResults<
  TData = Awaited<
    ReturnType<typeof recommendSessionControllerGetRecommendSessionResults>
  >,
  TError = unknown,
>(
  sessionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof recommendSessionControllerGetRecommendSessionResults
          >
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useRecommendSessionControllerGetRecommendSessionResults<
  TData = Awaited<
    ReturnType<typeof recommendSessionControllerGetRecommendSessionResults>
  >,
  TError = unknown,
>(
  sessionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof recommendSessionControllerGetRecommendSessionResults
          >
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getRecommendSessionControllerGetRecommendSessionResultsQueryOptions(
      sessionId,
      options,
    );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchRecommendSessionControllerGetRecommendSessionResultsQuery =
  async <
    TData = Awaited<
      ReturnType<typeof recommendSessionControllerGetRecommendSessionResults>
    >,
    TError = unknown,
  >(
    queryClient: QueryClient,
    sessionId: string,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof recommendSessionControllerGetRecommendSessionResults
            >
          >,
          TError,
          TData
        >
      >;
      request?: SecondParameter<typeof http>;
    },
  ): Promise<QueryClient> => {
    const queryOptions =
      getRecommendSessionControllerGetRecommendSessionResultsQueryOptions(
        sessionId,
        options,
      );

    await queryClient.prefetchQuery(queryOptions);

    return queryClient;
  };

export type recommendSessionControllerGetRecommendSessionResultOneResponse200 =
  {
    data: undefined;
    status: 200;
  };

export type recommendSessionControllerGetRecommendSessionResultOneResponseComposite =
  recommendSessionControllerGetRecommendSessionResultOneResponse200;

export type recommendSessionControllerGetRecommendSessionResultOneResponse =
  recommendSessionControllerGetRecommendSessionResultOneResponseComposite & {
    headers: Headers;
  };

export const getRecommendSessionControllerGetRecommendSessionResultOneUrl = (
  sessionId: string,
  order: number,
) => {
  return `https://api-dev.pockey.pics/api/v1/recommend-session/${sessionId}/result/${order}`;
};

export const recommendSessionControllerGetRecommendSessionResultOne = async (
  sessionId: string,
  order: number,
  options?: RequestInit,
): Promise<recommendSessionControllerGetRecommendSessionResultOneResponse> => {
  return http<recommendSessionControllerGetRecommendSessionResultOneResponse>(
    getRecommendSessionControllerGetRecommendSessionResultOneUrl(
      sessionId,
      order,
    ),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getRecommendSessionControllerGetRecommendSessionResultOneQueryKey =
  (sessionId: string, order: number) => {
    return [
      `https://api-dev.pockey.pics/api/v1/recommend-session/${sessionId}/result/${order}`,
    ] as const;
  };

export const getRecommendSessionControllerGetRecommendSessionResultOneQueryOptions =
  <
    TData = Awaited<
      ReturnType<typeof recommendSessionControllerGetRecommendSessionResultOne>
    >,
    TError = unknown,
  >(
    sessionId: string,
    order: number,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof recommendSessionControllerGetRecommendSessionResultOne
            >
          >,
          TError,
          TData
        >
      >;
      request?: SecondParameter<typeof http>;
    },
  ) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getRecommendSessionControllerGetRecommendSessionResultOneQueryKey(
        sessionId,
        order,
      );

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof recommendSessionControllerGetRecommendSessionResultOne
        >
      >
    > = ({ signal }) =>
      recommendSessionControllerGetRecommendSessionResultOne(sessionId, order, {
        signal,
        ...requestOptions,
      });

    return {
      queryKey,
      queryFn,
      enabled: !!(sessionId && order),
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof recommendSessionControllerGetRecommendSessionResultOne
        >
      >,
      TError,
      TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
  };

export type RecommendSessionControllerGetRecommendSessionResultOneQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof recommendSessionControllerGetRecommendSessionResultOne>
    >
  >;
export type RecommendSessionControllerGetRecommendSessionResultOneQueryError =
  unknown;

export function useRecommendSessionControllerGetRecommendSessionResultOne<
  TData = Awaited<
    ReturnType<typeof recommendSessionControllerGetRecommendSessionResultOne>
  >,
  TError = unknown,
>(
  sessionId: string,
  order: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof recommendSessionControllerGetRecommendSessionResultOne
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof recommendSessionControllerGetRecommendSessionResultOne
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof recommendSessionControllerGetRecommendSessionResultOne
            >
          >
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRecommendSessionControllerGetRecommendSessionResultOne<
  TData = Awaited<
    ReturnType<typeof recommendSessionControllerGetRecommendSessionResultOne>
  >,
  TError = unknown,
>(
  sessionId: string,
  order: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof recommendSessionControllerGetRecommendSessionResultOne
          >
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof recommendSessionControllerGetRecommendSessionResultOne
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof recommendSessionControllerGetRecommendSessionResultOne
            >
          >
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRecommendSessionControllerGetRecommendSessionResultOne<
  TData = Awaited<
    ReturnType<typeof recommendSessionControllerGetRecommendSessionResultOne>
  >,
  TError = unknown,
>(
  sessionId: string,
  order: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof recommendSessionControllerGetRecommendSessionResultOne
          >
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useRecommendSessionControllerGetRecommendSessionResultOne<
  TData = Awaited<
    ReturnType<typeof recommendSessionControllerGetRecommendSessionResultOne>
  >,
  TError = unknown,
>(
  sessionId: string,
  order: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof recommendSessionControllerGetRecommendSessionResultOne
          >
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getRecommendSessionControllerGetRecommendSessionResultOneQueryOptions(
      sessionId,
      order,
      options,
    );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchRecommendSessionControllerGetRecommendSessionResultOneQuery =
  async <
    TData = Awaited<
      ReturnType<typeof recommendSessionControllerGetRecommendSessionResultOne>
    >,
    TError = unknown,
  >(
    queryClient: QueryClient,
    sessionId: string,
    order: number,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof recommendSessionControllerGetRecommendSessionResultOne
            >
          >,
          TError,
          TData
        >
      >;
      request?: SecondParameter<typeof http>;
    },
  ): Promise<QueryClient> => {
    const queryOptions =
      getRecommendSessionControllerGetRecommendSessionResultOneQueryOptions(
        sessionId,
        order,
        options,
      );

    await queryClient.prefetchQuery(queryOptions);

    return queryClient;
  };

export type recommendSessionControllerStartSessionResponse201 = {
  data: RecommendSessionControllerStartSession201;
  status: 201;
};

export type recommendSessionControllerStartSessionResponseComposite =
  recommendSessionControllerStartSessionResponse201;

export type recommendSessionControllerStartSessionResponse =
  recommendSessionControllerStartSessionResponseComposite & {
    headers: Headers;
  };

export const getRecommendSessionControllerStartSessionUrl = () => {
  return `https://api-dev.pockey.pics/api/v1/recommend-session`;
};

export const recommendSessionControllerStartSession = async (
  startSessionRequest: StartSessionRequest,
  options?: RequestInit,
): Promise<recommendSessionControllerStartSessionResponse> => {
  return http<recommendSessionControllerStartSessionResponse>(
    getRecommendSessionControllerStartSessionUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(startSessionRequest),
    },
  );
};

export const getRecommendSessionControllerStartSessionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof recommendSessionControllerStartSession>>,
    TError,
    { data: StartSessionRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof recommendSessionControllerStartSession>>,
  TError,
  { data: StartSessionRequest },
  TContext
> => {
  const mutationKey = ["recommendSessionControllerStartSession"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof recommendSessionControllerStartSession>>,
    { data: StartSessionRequest }
  > = (props) => {
    const { data } = props ?? {};

    return recommendSessionControllerStartSession(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RecommendSessionControllerStartSessionMutationResult = NonNullable<
  Awaited<ReturnType<typeof recommendSessionControllerStartSession>>
>;
export type RecommendSessionControllerStartSessionMutationBody =
  StartSessionRequest;
export type RecommendSessionControllerStartSessionMutationError = unknown;

export const useRecommendSessionControllerStartSession = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof recommendSessionControllerStartSession>>,
      TError,
      { data: StartSessionRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof recommendSessionControllerStartSession>>,
  TError,
  { data: StartSessionRequest },
  TContext
> => {
  const mutationOptions =
    getRecommendSessionControllerStartSessionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type recommendSessionControllerSubmitAnswerResponse201 = {
  data: RecommendSessionControllerSubmitAnswer201;
  status: 201;
};

export type recommendSessionControllerSubmitAnswerResponseComposite =
  recommendSessionControllerSubmitAnswerResponse201;

export type recommendSessionControllerSubmitAnswerResponse =
  recommendSessionControllerSubmitAnswerResponseComposite & {
    headers: Headers;
  };

export const getRecommendSessionControllerSubmitAnswerUrl = (
  sessionId: string,
) => {
  return `https://api-dev.pockey.pics/api/v1/recommend-session/${sessionId}/answer`;
};

export const recommendSessionControllerSubmitAnswer = async (
  sessionId: string,
  submitAnswerRequest: SubmitAnswerRequest,
  options?: RequestInit,
): Promise<recommendSessionControllerSubmitAnswerResponse> => {
  return http<recommendSessionControllerSubmitAnswerResponse>(
    getRecommendSessionControllerSubmitAnswerUrl(sessionId),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(submitAnswerRequest),
    },
  );
};

export const getRecommendSessionControllerSubmitAnswerMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof recommendSessionControllerSubmitAnswer>>,
    TError,
    { sessionId: string; data: SubmitAnswerRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof recommendSessionControllerSubmitAnswer>>,
  TError,
  { sessionId: string; data: SubmitAnswerRequest },
  TContext
> => {
  const mutationKey = ["recommendSessionControllerSubmitAnswer"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof recommendSessionControllerSubmitAnswer>>,
    { sessionId: string; data: SubmitAnswerRequest }
  > = (props) => {
    const { sessionId, data } = props ?? {};

    return recommendSessionControllerSubmitAnswer(
      sessionId,
      data,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type RecommendSessionControllerSubmitAnswerMutationResult = NonNullable<
  Awaited<ReturnType<typeof recommendSessionControllerSubmitAnswer>>
>;
export type RecommendSessionControllerSubmitAnswerMutationBody =
  SubmitAnswerRequest;
export type RecommendSessionControllerSubmitAnswerMutationError = unknown;

export const useRecommendSessionControllerSubmitAnswer = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof recommendSessionControllerSubmitAnswer>>,
      TError,
      { sessionId: string; data: SubmitAnswerRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof recommendSessionControllerSubmitAnswer>>,
  TError,
  { sessionId: string; data: SubmitAnswerRequest },
  TContext
> => {
  const mutationOptions =
    getRecommendSessionControllerSubmitAnswerMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type recommendSessionControllerEndSessionResponse200 = {
  data: undefined;
  status: 200;
};

export type recommendSessionControllerEndSessionResponseComposite =
  recommendSessionControllerEndSessionResponse200;

export type recommendSessionControllerEndSessionResponse =
  recommendSessionControllerEndSessionResponseComposite & {
    headers: Headers;
  };

export const getRecommendSessionControllerEndSessionUrl = (
  sessionId: string,
) => {
  return `https://api-dev.pockey.pics/api/v1/recommend-session/${sessionId}`;
};

export const recommendSessionControllerEndSession = async (
  sessionId: string,
  options?: RequestInit,
): Promise<recommendSessionControllerEndSessionResponse> => {
  return http<recommendSessionControllerEndSessionResponse>(
    getRecommendSessionControllerEndSessionUrl(sessionId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getRecommendSessionControllerEndSessionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof recommendSessionControllerEndSession>>,
    TError,
    { sessionId: string },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof recommendSessionControllerEndSession>>,
  TError,
  { sessionId: string },
  TContext
> => {
  const mutationKey = ["recommendSessionControllerEndSession"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof recommendSessionControllerEndSession>>,
    { sessionId: string }
  > = (props) => {
    const { sessionId } = props ?? {};

    return recommendSessionControllerEndSession(sessionId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RecommendSessionControllerEndSessionMutationResult = NonNullable<
  Awaited<ReturnType<typeof recommendSessionControllerEndSession>>
>;

export type RecommendSessionControllerEndSessionMutationError = unknown;

export const useRecommendSessionControllerEndSession = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof recommendSessionControllerEndSession>>,
      TError,
      { sessionId: string },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof recommendSessionControllerEndSession>>,
  TError,
  { sessionId: string },
  TContext
> => {
  const mutationOptions =
    getRecommendSessionControllerEndSessionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
